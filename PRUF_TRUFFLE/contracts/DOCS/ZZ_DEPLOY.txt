/*-----------------------------------------------------------------
__/\\\\\\\\\\\\\ _____/\\\\\\\\\ _______/\\__/\\ ___/\\\\\\\\\\\\\\\        
 _\/\\\/////////\\\ _/\\\///////\\\ ____\//__\//____\/\\\///////////__       
  _\/\\\_______\/\\\_\/\\\_____\/\\\ ________________\/\\\ ____________      
   _\/\\\\\\\\\\\\\/__\/\\\\\\\\\\\/_____/\\\____/\\\_\/\\\\\\\\\\\ ____     
    _\/\\\/////////____\/\\\//////\\\ ___\/\\\___\/\\\_\/\\\///////______    
     _\/\\\ ____________\/\\\ ___\//\\\ __\/\\\___\/\\\_\/\\\ ____________   
      _\/\\\ ____________\/\\\ ____\//\\\ _\/\\\___\/\\\_\/\\\ ____________  
       _\/\\\ ____________\/\\\ _____\//\\\_\//\\\\\\\\\ _\/\\\ ____________ 
        _\/// _____________\/// _______\/// __\///////// __\/// _____________
/*-----------------------------------------------------------------
      it("Should deploy Storage", async () => {
      });
    
      it("Should deploy UTIL_TKN", async () => {
      });
    
      it("Should deploy PRUF_A_TKN", async () => {
      });
    
      it("Should deploy PRUF_NODE_TKN", async () => {
      });
    
      it("Should deploy PRUF_NODE_STOR", async () => {
      });
    
      it("Should deploy PRUF_NODE_MGR", async () => {
      });
    
      it("Should deploy PRUF_NODE_BLDR", async () => {
      });
    
      it("Should deploy PRUF_APP_NC", async () => {
      });
    
      it("Should deploy PRUF_DAO_A", async () => {
      });
     
      it("Should deploy PRUF_DAO_B", async () => {
      });
    
      it("Should deploy PRUF_DAO", async () => {
      });
    
      it("Should deploy PRUF_DAO_STOR", async () => {
      });
    
      it("Should deploy CLOCK", async () => {
      });
    
      it("Should deploy PRUF_HELPER", async () => {
      });
    
      it("Should deploy RAVE", async () => {
      });
    
      it("Should authorize account1 as DAOveto in DAO", () => {
        return DAO.grantRole(daoVetoRoleB32, account1);
      });
    
      it("Should authorize DAO_A as DAOlayer in DAO_STOR", () => {
        return DAO_STOR.grantRole(DAOlayerRoleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_B as DAOlayer in DAO_STOR", () => {
        return DAO_STOR.grantRole(DAOlayerRoleB32, DAO_B.address);
      });
    
      it("Should authorize DAO as DAOadmin in DAO_STOR", () => {
        return DAO_STOR.grantRole(DAOadminRoleB32, DAO.address);
      });
    
      it("Should authorize DAO_A in STOR", () => {
        return STOR.grantRole(DAOroleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_B in STOR", () => {
        return STOR.grantRole(DAOroleB32, DAO_B.address);
      });
    
      it("Should add default contracts to storage", () => {
        return STOR.addDefaultContracts("0", "NODE_MGR", "1")
    
            return STOR.addDefaultContracts("1", "NODE_TKN", "1")
    
            return STOR.addDefaultContracts("2", "NODE_STOR", "1")
    
            return STOR.addDefaultContracts("3", "A_TKN", "1")
    
            return STOR.addDefaultContracts("4", "APP_NC", "2");
      });
    
      it("Should add Storage to each contract", () => {
        return NODE_MGR.setStorageContract(STOR.address)
    
            return NODE_STOR.setStorageContract(STOR.address)
    
            return A_TKN.setStorageContract(STOR.address)
    
            return APP_NC.setStorageContract(STOR.address)
    
            return NODE_BLDR.setStorageContract(STOR.address)
    
            return DAO_A.setStorageContract(STOR.address)
    
            return DAO_B.setStorageContract(STOR.address)
    
            return DAO.setStorageContract(STOR.address)
    
            return DAO_STOR.setStorageContract(STOR.address);
      });
    
      it("Should add contract addresses to storage", () => {
        return STOR.authorizeContract("NODE_MGR", NODE_MGR.address, "0", "1")
    
            return STOR.authorizeContract("NODE_STOR", NODE_STOR.address, "0", "1",)
    
            return STOR.authorizeContract("NODE_TKN", NODE_TKN.address, "0", "1")
    
            return STOR.authorizeContract("A_TKN", A_TKN.address, "0", "1")
    
            return STOR.authorizeContract("UTIL_TKN", UTIL_TKN.address, "0", "1")
    
            return STOR.authorizeContract("DAO_STOR", DAO_STOR.address, "0", "1")
    
            return STOR.authorizeContract("CLOCK", CLOCK.address, "0", "1");
    
            return STOR.authorizeContract("APP_NC", APP_NC.address, "0", "2")
      });
    
      it("Should resolve contract addresses", () => {
        return NODE_MGR.resolveContractAddresses()
    
            return NODE_STOR.resolveContractAddresses()
    
            return A_TKN.resolveContractAddresses()
    
            return APP_NC.resolveContractAddresses()
    
            return NODE_BLDR.resolveContractAddresses()
    
            return DAO_A.resolveContractAddresses()
    
            return DAO_B.resolveContractAddresses()
    
            return DAO.resolveContractAddresses()
    
            return DAO_STOR.resolveContractAddresses()
      });
    
      it("Should give DAO_A assetTransferRole for APP_NC", () => {
        return APP_NC.grantRole(assetTransferRoleB32, DAO_A.address);
      });
    
      it("Should give DAO_B assetTransferRole for APP_NC", () => {
        return APP_NC.grantRole(assetTransferRoleB32, DAO_B.address);
      });
    
      it("Should authorize DAO_A with defaultAdminRole for A_TKN", () => {
        return A_TKN.grantRole(defaultAdminRoleB32, DAO_A.address);
      });
    
      it("Should authorize APP_NC with minterRole for A_TKN", () => {
        return A_TKN.grantRole(minterRoleB32, APP_NC.address);
      });
    
      it("Should authorize DAO_A with DAOrole for A_TKN", () => {
        return A_TKN.grantRole(DAOroleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_A with pauserRole for A_TKN", () => {
        return A_TKN.grantRole(pauserRoleB32, DAO_A.address);
      });
    
      it("Should authorize account1 with minterRole for A_TKN", () => {
        return A_TKN.grantRole(minterRoleB32, account1);
      });
    
      it("Should authorize DAO_A with defaultAdminRole for UTIL_TKN", () => {
        return UTIL_TKN.grantRole(defaultAdminRoleB32, DAO_A.address);
      });
    
      it("Should authorize NODE_MGR with trustedAgentRole for UTIL_TKN", () => {
        return UTIL_TKN.grantRole(trustedAgentRoleB32, NODE_MGR.address);
      });
    
      it("Should authorize DAO_A with pauserRole for UTIL_TKN", () => {
        return UTIL_TKN.grantRole(pauserRoleB32, DAO_A.address);
      });
    
      it("Should authorize all payable contracts for transactions", () => {
        return UTIL_TKN.grantRole(payableRoleB32, NODE_MGR.address)
        
          return UTIL_TKN.grantRole(payableRoleB32, APP_NC.address);
      });
    
      it("Should authorize RAVE with minterRole for UTIL_TKN", () => {
        return UTIL_TKN.grantRole(minterRoleB32, RAVE.address);
      });
    
      it("Should authorize DAO_A with contractAdminRole for NODE_TKN", () => {
        return NODE_TKN.grantRole(contractAdminRoleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_A with pauserRole for NODE_TKN", () => {
        return NODE_TKN.grantRole(pauserRoleB32, DAO_A.address);
      });
    
      it("Should authorize NODE_MGR with minterRole for NODE_TKN", () => {
        return NODE_TKN.grantRole(minterRoleB32, NODE_MGR.address);
      });
    
      it("Should authorize DAO_A with defaultAdminRole for NODE_MGR", () => {
        return NODE_MGR.grantRole(defaultAdminRoleB32, DAO_A.address);
      });
    
      it("Should authorize account1 with IDverifierRole for NODE_MGR", () => {
        return NODE_MGR.grantRole(IDverifierRoleB32, account1);
      });
    
      it("Should authorize NODE_BLDR with IDverifierRole for NODE_MGR", () => {
        return NODE_MGR.grantRole(IDverifierRoleB32, NODE_BLDR.address);
      });
    
      it("Should authorize DAO_A with DAOrole for NODE_MGR", () => {
        return NODE_MGR.grantRole(DAOroleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_A with pauserRole for NODE_MGR", () => {
        return NODE_MGR.grantRole(pauserRoleB32, DAO_A.address);
      });
    
      it("Should authorize RAVE with IDverifierRole for NODE_MGR", () => {
        return NODE_MGR.grantRole(IDverifierRoleB32, RAVE.adddress);
      });
    
      it("Should authorize DAO_A with defaultAdminRole for NODE_STOR", () => {
        return NODE_STOR.grantRole(defaultAdminRoleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_A with DAOrole for NODE_STOR", () => {
        return NODE_STOR.grantRole(DAOroleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_A with pauserRole for NODE_STOR", () => {
        return NODE_STOR.grantRole(pauserRoleB32, DAO_A.address);
      });
    
      it("Should authorize DAO_A with contractAdminRole for NODE_STOR", () => {
        return NODE_STOR.grantRole(contractAdminRoleB32, DAO_A.address);
      });
    
      it("Should authorize NODE_MGR with nodeAdminRole for NODE_STOR", () => {
        return NODE_STOR.grantRole(nodeAdminRoleB32, NODE_MGR.address);
      });
    
      it("Should authorize account1 with nodeAdminRole for NODE_STOR", () => {
        return NODE_STOR.grantRole(nodeAdminRoleB32, account1);
      });
    
      it("Should authorize account1 with DAOrole for NODE_STOR", () => {
        return NODE_STOR.grantRole(DAOroleB32, account1);
      });
    
      it("Should authorize account1 with DAOrole for STOR", () => {
        return STOR.grantRole(DAOroleB32, account1);
      });
    
      it("Should authorize account1 with DAOrole for A_TKN", () => {
        return A_TKN.grantRole(DAOroleB32, account1);
      });
    
      it("Should set all permitted storage providers", () => {
        return NODE_STOR.setStorageProviders("0", "1")
    
            return NODE_STOR.setStorageProviders("1", "1")
    
            return NODE_STOR.setStorageProviders("2", "1");
      });
    
      it("Should set all permitted management types", () => {
        return NODE_STOR.setManagementTypes("0", "1")
    
            return NODE_STOR.setManagementTypes("1", "1")
    
            return NODE_STOR.setManagementTypes("2", "1")
    
            return NODE_STOR.setManagementTypes("3", "1")
    
            return NODE_STOR.setManagementTypes("4", "1")
    
            return NODE_STOR.setManagementTypes("5", "1")
    
            return NODE_STOR.setManagementTypes("255", "1");
      });
    
      it("Should set all permitted custody types", () => {
        return NODE_STOR.setCustodyTypes("0", "1")
    
            return NODE_STOR.setCustodyTypes("1", "1")
    
            return NODE_STOR.setCustodyTypes("2", "1")
    
            return NODE_STOR.setCustodyTypes("3", "1")
    
            return NODE_STOR.setCustodyTypes("4", "1")
    
            return NODE_STOR.setCustodyTypes("5", "1")
    
            return NODE_STOR.setCustodyTypes("11", "1")
    
            return NODE_STOR.setCustodyTypes("12", "1");
      });
    
      it("Should set all baseURI(s) for storage providers", () => {
        return A_TKN.setBaseURIforStorageType("0", "TEST0")
    
            return A_TKN.setBaseURIforStorageType("1", "https://ipfs.io/ipfs/")
    
            return A_TKN.setBaseURIforStorageType("2", "https://arweave.net/");
      });
    
      it("Should mint root tokens", () => {
        return NODE_MGR.createNode(
          "1", "Art", "1", "3", "0", "0", "9500", rgt000, rgt000, account1)

            return NODE_MGR.createNode(
              "2", "Apparel", "2", "3", "0", "0", "9500", rgt000, rgt000, account1)

            return NODE_MGR.createNode(
              "3", "Ticketing", "3", "3", "0", "0", "9500", rgt000, rgt000, account1)

            return NODE_MGR.createNode(
              "4", "Consumables", "4", "3", "0", "0", "9500", rgt000, rgt000, account1)

            return NODE_MGR.createNode(
	      "5", "Transportation", "5", "3", "0", "0", "9500", rgt000, rgt000, account1)

            return NODE_MGR.createNode(
              "6", "Industrial", "6", "3", "0", "0", "9500", rgt000, rgt000, account1)

            return NODE_MGR.createNode(
              "7", "Miscellaneous", "7", "3", "0", "0", "9500", rgt000, rgt000, account1);
      });
    
      it("Should set costs in Art", () => {
        return NODE_MGR.setOperationCosts("1", "1", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("1", "2", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("1", "3", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("1", "4", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("1", "5", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("1", "6", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("1", "7", "10000000000000000", account1)
    
           return NODE_MGR.setOperationCosts("1", "8", "10000000000000000", account1);
      });
    
      it("Should set costs in Apparel", () => {
        return NODE_MGR.setOperationCosts("2", "1", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("2", "2", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("2", "3", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("2", "4", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("2", "5", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("2", "6", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("2", "7", "10000000000000000", account1)
    
           return NODE_MGR.setOperationCosts("2", "8", "10000000000000000", account1);
      });
    
      it("Should set costs in Ticketing", () => {
        return NODE_MGR.setOperationCosts("3", "1", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("3", "2", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("3", "3", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("3", "4", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("3", "5", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("3", "6", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("3", "7", "10000000000000000", account1)
    
           return NODE_MGR.setOperationCosts("3", "8", "10000000000000000", account1);
      });
    
      it("Should set costs in Consumables", () => {
        return NODE_MGR.setOperationCosts("4", "1", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("4", "2", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("4", "3", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("4", "4", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("4", "5", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("4", "6", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("4", "7", "10000000000000000", account1)
    
           return NODE_MGR.setOperationCosts("4", "8", "10000000000000000", account1);
      });
    
      it("Should set costs in Transportation", () => {
        return NODE_MGR.setOperationCosts("5", "1", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("5", "2", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("5", "3", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("5", "4", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("5", "5", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("5", "6", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("5", "7", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("5", "8", "10000000000000000", account1);
      });
    
      it("Should set costs in Industrial", () => {
        return NODE_MGR.setOperationCosts("6", "1", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("6", "2", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("6", "3", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("6", "4", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("6", "5", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("6", "6", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("6", "7", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("6", "8", "10000000000000000", account1);
      });
    
      it("Should set costs in Miscellaneous", () => {
        return NODE_MGR.setOperationCosts("7", "1", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("7", "2", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("7", "3", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("7", "4", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("7", "5", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("7", "6", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts("7", "7", "10000000000000000", account1)
    
            return NODE_MGR.setOperationCosts( "7", "8", "10000000000000000", account1);
      });
*----------------------------------------------------------------