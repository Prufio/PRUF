{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_msg",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "b32",
						"type": "bytes32"
					}
				],
				"name": "REPORT",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "B320xF_",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addr",
						"type": "address"
					},
					{
						"internalType": "uint32",
						"name": "_node",
						"type": "uint32"
					}
				],
				"name": "ContractInfoHash",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DAO_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PAUSER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_contractNumber",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "_contractAuthLevel",
						"type": "uint8"
					}
				],
				"name": "addDefaultContracts",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_contractName",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_contractAddr",
						"type": "address"
					},
					{
						"internalType": "uint32",
						"name": "_node",
						"type": "uint32"
					},
					{
						"internalType": "uint8",
						"name": "_contractAuthLevel",
						"type": "uint8"
					}
				],
				"name": "authorizeContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_rgtHash",
						"type": "bytes32"
					}
				],
				"name": "blockchainVerifyRightsHolder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "_newNode",
						"type": "uint32"
					}
				],
				"name": "changeNode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "uint32",
						"name": "_node",
						"type": "uint32"
					},
					{
						"internalType": "uint8",
						"name": "_contractAuthLevel",
						"type": "uint8"
					}
				],
				"name": "enableContractForNode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_node",
						"type": "uint32"
					}
				],
				"name": "enableDefaultContractsForNode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					}
				],
				"name": "endEscrow",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_contractNumber",
						"type": "uint256"
					}
				],
				"name": "getDefaultContract",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "contractType",
								"type": "uint8"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							}
						],
						"internalType": "struct DefaultContract",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_mutableStorage1",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_mutableStorage2",
						"type": "bytes32"
					}
				],
				"name": "modifyMutableStorage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_rgtHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint8",
						"name": "_newAssetStatus",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "_countDown",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_int32temp",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_incrementModCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_incrementNumberOfTransfers",
						"type": "uint256"
					}
				],
				"name": "modifyRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_rgtHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_URIhash",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "_node",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_countDownStart",
						"type": "uint32"
					}
				],
				"name": "newRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"name": "resolveContractAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					}
				],
				"name": "retrieveRecord",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "assetStatus",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "modCount",
								"type": "uint8"
							},
							{
								"internalType": "uint16",
								"name": "numberOfTransfers",
								"type": "uint16"
							},
							{
								"internalType": "uint32",
								"name": "node",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "countDown",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "int32temp",
								"type": "uint32"
							},
							{
								"internalType": "bytes32",
								"name": "URIhash",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "mutableStorage1",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "nonMutableStorage1",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "mutableStorage2",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "nonMutableStorage2",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "rightsHolder",
								"type": "bytes32"
							}
						],
						"internalType": "struct Record",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					}
				],
				"name": "retrieveShortRecord",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint8",
						"name": "_newAssetStatus",
						"type": "uint8"
					}
				],
				"name": "setEscrow",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint8",
						"name": "_newAssetStatus",
						"type": "uint8"
					}
				],
				"name": "setLostOrStolen",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_nonMutableStorage1",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_nonMutableStorage2",
						"type": "bytes32"
					}
				],
				"name": "setNonMutableStorage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_idxHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_rgtHash",
						"type": "bytes32"
					}
				],
				"name": "verifyRightsHolder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"ContractInfoHash(address,uint32)": {
					"details": "returns the contract type of a contract with address _addr.",
					"params": {
						"_addr": "- contract address",
						"_node": "- node to look up contract type-in-class"
					},
					"returns": {
						"_0": "contractType of given contract"
					}
				},
				"addDefaultContracts(uint256,string,uint8)": {
					"details": "set the default list of 11 contracts (zero index) to be applied to Noees",
					"params": {
						"_contractAuthLevel": "- authLevel",
						"_contractNumber": "- 0-10",
						"_name": "- name"
					}
				},
				"authorizeContract(string,address,uint32,uint8)": {
					"details": "Authorize / Deauthorize ADRESSES permitted to make record modifications, per node populates contract name resolution and data mappings",
					"params": {
						"_contractAddr": "- address of contract",
						"_contractAuthLevel": "- auth level to assign",
						"_contractName": "- String name of contract",
						"_node": "- node to authorize in"
					}
				},
				"blockchainVerifyRightsHolder(bytes32,bytes32)": {
					"details": "Compare record.rightsholder with supplied bytes32 rightsholder (writes an emit in blockchain for independant verification)",
					"params": {
						"_idxHash": "- record asset ID",
						"_rgtHash": "- record owner ID hash"
					},
					"returns": {
						"_0": "170 if matches, 0 if not"
					}
				},
				"changeNode(bytes32,uint32)": {
					"details": "Change node of an asset - writes to node in the 'Record' struct of the 'database' at _idxHash",
					"params": {
						"_idxHash": "- record asset ID",
						"_newNode": "- Node to change to"
					}
				},
				"enableContractForNode(string,uint32,uint8)": {
					"details": "Authorize / Deauthorize contract NAMES permitted to make record modifications, per node allows NodeTokenHolder to Authorize / Deauthorize specific contracts to work within their node",
					"params": {
						"_contractAuthLevel": "- auth level to set for thae contract, in that node",
						"_name": "-  Name of contract being authed",
						"_node": "- affected node"
					}
				},
				"enableDefaultContractsForNode(uint32)": {
					"details": "Set the default 11 authorized contracts",
					"params": {
						"_node": "the Node which will be enabled for the default contracts"
					}
				},
				"endEscrow(bytes32)": {
					"details": "remove an asset from escrow status. Implicitly trusts escrowManager ECR_MGR contract",
					"params": {
						"_idxHash": "- record asset ID"
					}
				},
				"getDefaultContract(uint256)": {
					"details": "retrieve a record from the default list of 11 contracts to be applied to Nodees",
					"params": {
						"_contractNumber": "to look up (0-10)"
					},
					"returns": {
						"_0": "the name and auth level of indexed contract"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"modifyMutableStorage(bytes32,bytes32,bytes32)": {
					"details": "Modify record MutableStorage data",
					"params": {
						"_idxHash": "- record asset ID",
						"_mutableStorage1": "- first half of content adressable storage location",
						"_mutableStorage2": "- second half of content adressable storage location"
					}
				},
				"modifyRecord(bytes32,bytes32,uint8,uint32,uint32,uint256,uint256)": {
					"details": "Modify a record, writing to the 'database' mapping with updates to multiple fields",
					"params": {
						"_countDown": "- New countdown value (must be <= old value)",
						"_idxHash": "- record asset ID",
						"_incrementModCount": "- 0 = no 170 = yes",
						"_incrementNumberOfTransfers": "- 0 = no 170 = yes",
						"_int32temp": "- temp value",
						"_newAssetStatus": "- New Status to set",
						"_rgtHash": "- record owner ID hash"
					}
				},
				"newRecord(bytes32,bytes32,bytes32,uint32,uint32)": {
					"details": "Make a new record, writing to the 'database' mapping with basic initial asset data calling contract must be authorized in relevant node",
					"params": {
						"_URIhash": "- hash of URI Suffix",
						"_countDownStart": "- initial value for decrement-only value",
						"_idxHash": "- asset ID befor node hashing",
						"_node": "- node in which to create the asset",
						"_rgtHash": "- rightsholder id hash"
					}
				},
				"pause()": {
					"details": "Triggers stopped state. (pausable)"
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
				},
				"resolveContractAddress(string)": {
					"details": "returns the address of a contract with name _name. This is for web3 implementations to find the right contract to interact with example :  Frontend = ****** so web 3 first asks storage where to find frontend, then calls for frontend functions.",
					"params": {
						"_name": "- contract name"
					},
					"returns": {
						"_0": "contract address"
					}
				},
				"retrieveRecord(bytes32)": {
					"details": "return a record from the database",
					"params": {
						"_idxHash": "- record asset ID returns a complete Record struct (see interfaces for struct definitions)"
					}
				},
				"retrieveShortRecord(bytes32)": {
					"details": "return a record from the database w/o rgt",
					"params": {
						"_idxHash": "- record asset ID"
					},
					"returns": {
						"_0": "rec.assetStatus, rec.modCount, rec.node, rec.countDown, rec.countDownStart, rec.mutableStorage1, rec.mutableStorage2, rec.nonMutableStorage1, rec.nonMutableStorage2,"
					}
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
				},
				"setEscrow(bytes32,uint8)": {
					"details": "Set an asset to escrow locked status (6/50/56).",
					"params": {
						"_idxHash": "- record asset ID",
						"_newAssetStatus": "- New Status to set"
					}
				},
				"setLostOrStolen(bytes32,uint8)": {
					"details": "Set an asset to Lost Or Stolen. Allows narrow modification of status 6/12 assets, normally locked",
					"params": {
						"_idxHash": "- record asset ID",
						"_newAssetStatus": "- Status to change to"
					}
				},
				"setNonMutableStorage(bytes32,bytes32,bytes32)": {
					"details": "Modify NonMutableStorage data",
					"params": {
						"_idxHash": "- record asset ID",
						"_nonMutableStorage1": "- first half of content addressable storage location",
						"_nonMutableStorage2": "- second half of content addressable storage location"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"unpause()": {
					"details": "Returns to normal state. (pausable)"
				},
				"verifyRightsHolder(bytes32,bytes32)": {
					"details": "Compare record.rightsholder with supplied bytes32 rightsholder",
					"params": {
						"_idxHash": "- record asset ID",
						"_rgtHash": "- record owner ID hash"
					},
					"returns": {
						"_0": "170 if matches, 0 if not"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/ReleaseCandidates/PRUF_STOR.sol": "STOR"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/access/AccessControl.sol": {
			"keccak256": "0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6",
			"license": "MIT",
			"urls": [
				"bzz-raw://f562746c399ae045994a88b2218d1238a349de07afbfb305aab0c7fdbc2954cc",
				"dweb:/ipfs/QmYoFrDD2c6fi9CpPz1bjCMAyketjZ3G7ByUSVQMntysms"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/access/IAccessControl.sol": {
			"keccak256": "0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44",
			"license": "MIT",
			"urls": [
				"bzz-raw://fbb9d503857eab98f87465df0f02fef03083f30c1dbec82f319f41aaadae19b4",
				"dweb:/ipfs/QmTxDshRAMtoeM45YrTzQZdpmy4mt4scCNHjfZiWSvdETF"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/security/Pausable.sol": {
			"keccak256": "0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b",
			"license": "MIT",
			"urls": [
				"bzz-raw://72b957861691ebdaa78c52834465c4f8296480fe4f1a12ba72dc6c0c8ac076dd",
				"dweb:/ipfs/QmVz1sHCwgEivHPRDswdt9tdvky7EnWqFmbuk1wFE55VMG"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/security/ReentrancyGuard.sol": {
			"keccak256": "0x3ad0ec379a808f08bbb0b2eaa4533add9a458cc411115030842034d8c2032c2b",
			"license": "MIT",
			"urls": [
				"bzz-raw://4a6ad8b70f72c7f95535ac08452129a4ccc9dd523a49d7b613938af95327debf",
				"dweb:/ipfs/Qmc2HdxeQoi9CA1TTuB4sCAEr1Bbrj38ZLBrE8moHNbyA5"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/utils/Context.sol": {
			"keccak256": "0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f",
			"license": "MIT",
			"urls": [
				"bzz-raw://26e8b38a7ac8e7b4463af00cf7fff1bf48ae9875765bf4f7751e100124d0bc8c",
				"dweb:/ipfs/QmWcsmkVr24xmmjfnBQZoemFniXjj3vwT78Cz6uqZW1Hux"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/utils/Strings.sol": {
			"keccak256": "0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d",
			"license": "MIT",
			"urls": [
				"bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e",
				"dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/utils/introspection/ERC165.sol": {
			"keccak256": "0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b",
			"license": "MIT",
			"urls": [
				"bzz-raw://d10e1d9b26042424789246603906ad06143bf9a928f4e99de8b5e3bdc662f549",
				"dweb:/ipfs/Qmejonoaj5MLekPus229rJQHcC6E9dz2xorjHJR84fMfmn"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Imports/utils/introspection/IERC165.sol": {
			"keccak256": "0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4",
			"license": "MIT",
			"urls": [
				"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6",
				"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/ReleaseCandidates/PRUF_STOR.sol": {
			"keccak256": "0x599339f795b413629c9ebef557b40a0deb3f9ef6fcce448fb991af8a094afcb4",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://55d72ba2075c4448f3804b9e17afae6f9a76ac709ee7f573c93678e102347020",
				"dweb:/ipfs/QmQCjcw1cRByinc7e7RGL2z27GeEDaHf3UfqQU5qvWU4Wy"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Resources/RESOURCE_PRUF_INTERFACES.sol": {
			"keccak256": "0x841b6fc8845d8872ce9dcbbbc0490ab7b40cfb36a245fab1bf24ad49a4ad9175",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://f338c910bf89b65a2ac4d788726f2606ae13ebc7577a95999e55f30590ca426e",
				"dweb:/ipfs/QmNa8ppLvDjtbsjB7Rw2Az6LhDoFbaYBvAssfaQi5e5NTz"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Resources/RESOURCE_PRUF_STRUCTS.sol": {
			"keccak256": "0xd3d7899f0b9c4c89a6e33efc0df7aca96c70de969fd9970faf25fe4c3afebb04",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://78c1a0d11459490772f78fcd3613d490ae7d2e2940bef39d1c7ee21407f26c11",
				"dweb:/ipfs/QmcrYC83Kw2whseL1a6Kx1z1BkDQBkzNpVyAGQp69JDxbR"
			]
		},
		"Documents/DEV/PRUF/PRUF_TRUFFLE/contracts/Resources/RESOURCE_PRUF_TKN_INTERFACES.sol": {
			"keccak256": "0x95a979542ef281bb5420312fb7b76e6bd4774bcdb0cf00e2701bbc5aacd3809d",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://2f0a8a77fa3d644cf03708ae994e6f3e3e7c171b239a545cab88ac40c0f2eb4c",
				"dweb:/ipfs/QmTM6eppxkRm83bmMbfEBWzZbrh5Pxe7Kz23B1xCM1kgAr"
			]
		}
	},
	"version": 1
}