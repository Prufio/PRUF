/*-----------------------------------------------------------------

__/\\\\\\\\\\\\\ _____/\\\\\\\\\ _______/\\../\\ ___/\\\\\\\\\\\\\\\        
 _\/\\\/////////\\\ _/\\\///////\\\ ____\//..\//____\/\\\///////////__       
  _\/\\\.......\/\\\.\/\\\.....\/\\\ ________________\/\\\ ____________      
   _\/\\\\\\\\\\\\\/__\/\\\\\\\\\\\/_____/\\\____/\\\.\/\\\\\\\\\\\ ____     
    _\/\\\/////////____\/\\\//////\\\ ___\/\\\___\/\\\.\/\\\///////______    
     _\/\\\ ____________\/\\\ ___\//\\\ __\/\\\___\/\\\.\/\\\ ____________   
      _\/\\\ ____________\/\\\ ____\//\\\ _\/\\\___\/\\\.\/\\\ ____________  
       _\/\\\ ____________\/\\\ _____\//\\\.\//\\\\\\\\\ _\/\\\ ____________ 
        _\/// _____________\/// _______\/// __\///////// __\/// _____________


// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.6.7;
/*-----------------------------------------------------------------
 *TESTNET TO DO :
 *
 *      * Faucet - 0.1 KETH per 5000 PRUF?
 *
 *      * ID token 1 per adreess
 *
 *      * token limit 40,000,000,000 instead of 4
 *
 *      * Webapp - mint pruf, mint ID tokens
 *
 *      * 
 *
 *      *
 *
 *      *
 *
 *
- ----------------------------------------------------------------

/*-----------------------------------------------------------------
 *TO DO :
 *
 *      * destructive verify(idxHash, greenRgtHash, newRgtHash)
 *           rgthash is rawRgt#idx -> is green rgtHash# -> is rgtHash
 *          takes greenRgtHash and hashes on chain to compare with rgtHash. 
 *          Enforces new rgtHash to eliminate replay
 *
 *      *  
 *
 *      *
 *
 *      *
 *
 *      *
 *
 *      *
 *
 *      *
 *
 *      *hand off an array to set pricing rather than one by one (gas cost) ????
 *
 *      *!! make it possible to modify ext data in AC manager
 *
 *      *Automate contract authorization 
 *
 *      *Eventually flatten contracts and factor interface file
 *
 *      *what do we do (if anything) with the 128 "free" bits in the storage struct?
 *
 *      *find any recursive calls
 *
 *      *Security token
 *
 *      *Define / document protocol
 *
 *      *make security token invisible from the main contracts 
 *
 *      !!** remint might get eaten in the dark forest!  check all other functions as well for this issue
 *
 *
- ----------------------------------------------------------------

/*-----------------------------------------------------------------
 *DOCS to write:
 *
 *      *Value proposition - general
 *
 *      *Value proposition - AC token / AC operator
 *
 *      *Value proposition - B.Pruf 
 *
 *      *Webapp tutorial
 *
 *      *Medium article on PRUF general
 *
 *
- ----------------------------------------------------------------

*-----------------------------------------------------------------
 *Rules for reminting tokens:      remint might get eaten in the dark forest!!!!!!!!!!!!!!!!!!!!!!!!!!!
 *  must have the plaintext that generates the rgtHash on-chain
 *
 *
 *Rules for burning records: 
 *  record is locked in escrow and the escrow contract gets the token. The asset is put into an indefinite escrow, 
 *  where the escrow amount is unpaid and time is indefinite. the asset owner is the escrow "holder" and can revert
 *  the escrow if they desire, which reverts the assetToken to their address. escrow amount is determined 
 *  AT THE TIME OF RECYCLING by the new record costs of the AC that the record is being recycled into by
 *  the new owner.
 *
 *
 * Rules for recycling records:
 *  escrow amount is the same as registration in the asset class where it will be registered (as per the "recycle asset" call),
 *  when the fee is paid the escrow is broken, and the asset token is assigned to the sender. The funds (less assetClassRoot fees)
 *  are divided 50/50 between the old owner (setter of the escrow) and the ACtoken holder for the new asset class. If funds are sent 
 *  to a dead escrow or there is an overpayment, the balance can be withdrawn.
 *
 *
 * Escrows with escrow.data > 199 cannot be ended by permissive end escrow (escrowmanager) 
 *   and must be ended only within their respective escrow contract.
 *
 *
 *  Recycle rules
 *          Not possible in Custodial asset classes
 *          Caller must hold token, must be in status 59
 *          Token goes into "indefinite" escrow, RGT set to 0xFFF...
 *              Caller is escrow controller, but escrow contract is "owner", can break escrow (resets to status 51)
 *              Price set when escrow is to be broken by reregistering, from costs of the category 
 *                     that it is to be imported into (endEscrow called from T_PRUF_APP?)
 *              Importing breaks the escrow
 *                  payment divided between ACroot, ACholder, and recycling address (escrow owner)     
 *                  token sent to new owner (payment sender), status set to 51
 *
- ----------------------------------------------------------------

*-----------------------------------------------------------------
 * FUTURE FEATURES?
 *      "bottle deposit" on asset creation to encourage recycling
 *  New Recycle :
 *          Not possible in Custodial asset classes
 *          Caller must hold token, must be in status 59
 *          Caller recieves deposit amount (how the bloody hell do we manage this????)
 *          Token goes into "indefinite" escrow, RGT set to 0xFFF...
 *              Caller is escrow controller, but escrow contract is "owner", can break escrow 
 *                      (requires repayment of deposit amount, resets to status 51)
 *              Price set when escrow is to be broken by reregistering, from costs of the category 
 *                     that it is to be imported into (endEscrow called from T_PRUF_APP?)
 *              Importing breaks the escrow
 *                  payment divided between ACroot, ACholder, and recycling address (escrow owner)     
 *                  token sent to new owner (payment sender), status set to 51
 *
 *
 *
- ----------------------------------------------------------------

*-----------------------------------------------------------------
 * NOTES 
 * All assetclasses in the same root should use the same data structure to generate the idxHash. Other structures 
 *      will result in a nonconforming "hidden" asset only findable in its own web interface, and not AC transportable.
 *
 * When upgrading a contract, all authorized asset classes will be linked to the name, not the newly deplyed contract address
 * PAYABLE CONTRACTS must be given the PAYABLE_ROLE in PRUF_TKN. This includes AC_MGR
- ----------------------------------------------------------------

*-----------------------------------------------------------------
 * IMPORTANT NOTE : DO NOT REMOVE FROM CODE:
 *      Verification of rgtHash in curated, custodial asset classes are not secure beyond the honorable intentions
 * of authorized recorders. All blockchain info is readable, so a bad actor could trivially obtain a copy of the
 * correct rgtHash on chain. This "stumbling block" measure is in place primarily to keep honest people honest, and
 * to require an actual, malicious effort to bypass security rather than a little copy-paste. Actual decentralized
 * security is provided with tokenized assets, which do not rely on the coercive trust relationship that creates the
 * incentive for recorders not to engage in malicious practices.
- -----------------------------------------------------------------

/*-----------------------------------------------------------------
 * ----------------------- PRUF StyleGuide ------------------------
 *-----------------------------------------------------------------
 *
 * 1: Checks
 * 2: Effects (on local data)
 * 3: Interactions (with other contracts, including returns)
 *
 * 0: Global (Storage) declarations and data structures
 * 1: constructor
 * 2: modifiers
 * 3: receive function (if exists)
 * 4: fallback function (if exists)
 * 5: external
 * 6: public
 * 7: internal
 * 8: private
 * * - within a group, view and pure are last
 *
 * ---Order of require statements---:
 * 1: (modifiers)
 * 2: checking custodial status
 * 3: checking the asset existance 
 * 4: checking the idendity and credentials of the caller
 * 5: checking the suitability of provided data for the proposed operation
 * 6: checking the suitability of asset details for the proposed operation
 * 7: verifying that provided verification data matches required data
 * 8: verifying that message contains any required payment
 *
- -----------------------------------------------------------------

*-----------------------------------------------------------------
* Cost indexes:
* 1: newRecordCost // Cost to create a new record
* 2: transferAssetCost // Cost to transfer a record from known rights holder to a new one
* 3: createNoteCost // Cost to add a static note to an asset
* 4: reMintRecordCost // Extra
* 5: changeStatusCost // Extra
* 6: forceModifyCost // Cost to brute-force a record transfer
- -----------------------------------------------------------------

/*-----------------------------------------------------------------
 * ------------------ Contract Resolution Names -------------------
 *-----------------------------------------------------------------
 *
 *  A_TKN - 1
 *  AC_TKN - 1
 *  ID_TKN - 10
 *
 *  APP - 1
 *  NP - 1
 *  APP_NC - 2
 *  NP_NC - 2
 *
 *  ECR - 3
 *  ECR_NC - 3
 *  RCLR - 3
 *
 *  ECR_MGR - 1
 *  AC_MGR - 1
 *  VFY - 1 ????
 *
- -----------------------------------------------------------------

/*-----------------------------------------------------------------
 * --------- CONTRACT Types:  contractAdresses (storage) ----------
 *-----------------------------------------------------------------
 * 
 * -----------------  AC0 is a flag for a contract being a pruf authorized contract, in general
 * 0   --Not Authorized
 * 1   --Authorized Contract for CUSTODIAL assets (contract will create assets with custodial assetStatus 0)
 * 2   --Authorized Contract for NON_CUSTODIAL assets (contract will create assets with custodial assetStatus 51)
 * 3   --Escrow contracts, Recycler (contracts authorized for ECR-MGR management)
 * 10  --Pruf contracts with no specific permissions, but still trusted
- -----------------------------------------------------------------

*-----------------------------------------------------------------
 * ASSET CLASS Types: AC_data.custodyType (AC_manager)
 * 0   --NONE
 * 1   --Custodial
 * 2   --Non-Custodial
 * 3   --Root (n/a)
 * 4   --Verify-Non-Custodial
 * 11  -- Free Custodial (no contract yet made, must ovveride createRecord in core to allow custody type 11)
 * 12  -- Free Non-Custodial (no contract yet made, must ovveride createRecord in core to allow custody type 12)
- -----------------------------------------------------------------

/*-----------------------------------------------------------------
 * ---------------- Authorized User Types, per AC -----------------
 *-----------------------------------------------------------------
 * 
 * -----------------  AC0 stores an count on the number of AC's a gicen addressHash is registered in
 * 0 = NO AUTHORIZATIONS
 * 1 - 4 = Standard User types
 * 1 - all priveleges
 * 2 - all but force-modify
 * 5 - 9 = Robot (cannot create or force-modify)
 * 10 = issue naked assets only
 * Other = no internal authorizations, but can be used by external functions
*-----------------------------------------------------------------

/*-----------------------------------------------------------------
 *--------------------- PRUF ASSET STATUSES -----------------------
 *-----------------------------------------------------------------
 *
 * 0 = no status, Non transferrable. Default asset creation status
 *       default after FMR, and after status 5 (essentially a FMR) (IN frontend)
 * 1 = transferrable
 * 2 = nontransferrable
 * 3 = stolen
 * 4 = lost
 * 5 = transferred but not reImported (no new rghtsholder information) implies that asset posessor is the owner. (discarded)
 *       must be re-imported by ACadmin through regular onboarding process
 *       no actions besides modify RGT to a new rightsholder can be performed on a statuss 5 asset (no status changes) (Frontend)
 * 6 = in supervised escrow, locked until timelock expires, but can be set to lost or stolen
 *       Status 1-6 Actions cannot be performed by automation.
 *       only ACAdmins can set or unset these statuses, except 5 which can be set by automation
 * 7 = out of Supervised escrow (user < 5)
 *
 * 50 Locked escrow
 * 51 = transferrable, exportable, automation set/unset (secret confirmed)(ACAdmin can unset)
 * 52 = non-transferrable, automation set/unset (secret confirmed)(ACAdmin can unset)
 * 53 = stolen (automation set)(ONLY ACAdmin can unset)
 * 54 = lost (automation set/unset)(ACAdmin can unset)             
 * 55 = asset transferred automation set/unset (secret confirmed)(Only ACAdmin can unset) (discarded) ####DO NOT USE????
                ^^!!!CANNOT BE SET BY CURRENT CONTRACTS 8/13/2020!!!^^
 * 56 = escrow - automation set/unset (secret confirmed)(ACAdmin can unset)
 * 57 = out of escrow
 * 58 = out of locked escrow
 * 59 = Discardable
 * 60 = Recyclable (can only be reimported by an ACAdmin) (discarded)
 * 70 = Importable(Exported)
 *
- -----------------------------------------------------------------

/*-----------------------------------------------------------------
 * ------------------ PRUF VERIFY ITEM STATUSES -------------------
 *-----------------------------------------------------------------
 * only trusted entities can put items "in pouch" 
 * only trusted entities can take items "out"
 * only pouchholder + can mark item status, etc
 * joe public can check only?
 * statuses:
 *
 * 0 = no status; clean
 * 1 = items with this SN are questionable (found an item that is apparently not real) --settable/clearable by type 2-3 user
 * 2 = items with this SN are counterfiet (original, authentic item recovered (and held/destroyed), or SN does not officially exist) --settable/clearable by type 3 user
 * 3 = this item SN was stolen --settable/clearable by type 2-3 user
 * 4 = this item SN was lost --settable/clearable by type 2-3 user
 * 5 = this item SN is in process --settable by type 2-3 user - clearable by type 3 user 
 * 6 =
 *
 * usertypes are indicated in idxAuthInVerify[_idxHash] - Auth levels are set when enabling an asset to be a pruf-verify wallet
 * 0 not authorized
 * 1 basic auth
 * 2 priveledged level auth
 * 3 admin level auth
 - ---------------------------------------------------------------*/

 /*-----------------------------------------------------------------
 * ----------------------- SETUP PROCEDURES ------------------------
 * -----------------------------------------------------------------
 * need at least 3 Eth adressses
 * 1: Deploy Contracts
 * 2: Add contracts @ respective name in storage, use assetclass 0
 * 3: Resolve token contract addresses
 * 4: Set storage contract in each contract
 * 5: ROLES:
 *      a: set MINTER_ROLE in PRUF_A_TKN for APP_NC, APP, NP, PIP (ALL CONTRACTS THAT MINT ASSET TOKENS)
 *      b: set PAYABLE_ROLE in PRUF_TKN for APP, APP_NC, RCLR (ALL PAYABLE CONTRACTS)
 *      c: set TRUSTED_AGENT_ROLE in PRUF_TKN for AC_MGR
 *      d: set MINTER_ROLE in AC_TKN for AC_MGR (ALL CONTRACTS THAT MINT AC TOKENS)
 *      e: set MINTER_ROLE in PRUF_TKN for TESTNET_MINTER (ALL CONTRACTS THAT MINT PRUF TOKENS)
 *      f: set MINTER_ROLE in PRUF_A_TKN for TESTNET_MINTER (ALL CONTRACTS THAT MINT ID TOKENS)
 * 6: Mint 2 root asset tokens. (home, foreign) !(CustodyType 3)!
 * 7: Mint 2 cust and 2 non-custodial assetclasses in the home assetclass
 * 8: Mint 1 cust and 1 non-custodial assetclasses in the foreign assetclass 
 * 9: Authorize contracts @ respective names in storage using existing assetclasses 
 *      -- type 1 for custodial, type 2 for non-custodial. Authorize asset token contract as type 1 in all root asset classes.
 * 10: Resolve Contract Addresses
 * 11: Set costs / users / types for root && rooted AC token
 * 12: THE WORKS
 *
- -----------------------------------------------------------------

Round robin test pattern:

1: Create an asset as non-custodial naked asset
2: claim the asset
3: try to claim again (fail)
4: add IPFS2 note
5: add IPFS2 note again (fail)
6: 





sec tok ideas

beancoin style - 1 token = 1 share
disadvantage is that each share must be redeemed separately, so higher gas costs

escrow style - sends tokens to escrow, escrow holds until escrow is up, then returns tokens and authorizes the address for funds.

special escrow-send tokens:
        creates a mapping of address to quantity of tokens.
        address that is used casnot be overwritten.
        escrow ends every 1000 blocks (starts at arbitrary time)
end escrow after escrow end block passes (all escrows end at the same time) (caller must be setter)
        sends tokens back to caller
        authorizes the fractional share of that (AND ONLY THAT) end blocks takings to the caller adress (IF YOU MISS ONE, THATS ON YOU)



*---------------------------------------PRuF Protocols-------------------------------------------
Pip
        - allows assets to be created with minimal gas costs as token-only assets 
        - allows registration at a later time for a specified, unuiqe item idxHash

Verify 
        - allows a single asset token to act as a wallet, holding or releasing serialized fungibles to verify the unuiqeness of each one.
        - If multiple wallets try to hold the same item, a "collision" is recorded for that serial number
        - held items can be marked as lost, stolen, suspect, counterfiet

Private Provenance
        - securely store proof of ownership with customizable levels of security and privacy
        - By default, only the owner of an asset can prove that an item is theirs
                - can be made publicly verifyable by name / id if desired
        - by default, items are searchable by their model / serial
                - can be made non-searchable without a unuiqe passphrase (salt)

        - trust enabled
                - verify the identity of a seller and their ownership of the asset to be sold
                - verify that an asset is not lost or stolen
        - secure transfer
                - verify an asset is set by the owner to a transferrable status
                - complete transfer on-chain to a new owner
        - boomerang
                - assets marked lost or stolen can have rewards set for return
                - assets can alternatively have a sale price set to enable reregistration by a finder
                - agents can be incentivised to return lost assets
        - marketspace
                - assets can be marked for sale
                - assets can be sold through escrow contracts to enable delivery service etc
                - looking up non-for sale assets can trigger a search of other assets registered for sale or deep distrubution vendors (requires external database)



*/
