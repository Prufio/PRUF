/*-----------------------------------------------------------------

__/\\\\\\\\\\\\\ _____/\\\\\\\\\ _______/\\../\\ ___/\\\\\\\\\\\\\\\        
 _\/\\\/////////\\\ _/\\\///////\\\ ____\//..\//____\/\\\///////////__       
  _\/\\\.......\/\\\.\/\\\.....\/\\\ ________________\/\\\ ____________      
   _\/\\\\\\\\\\\\\/__\/\\\\\\\\\\\/_____/\\\____/\\\.\/\\\\\\\\\\\ ____     
    _\/\\\/////////____\/\\\//////\\\ ___\/\\\___\/\\\.\/\\\///////______    
     _\/\\\ ____________\/\\\ ___\//\\\ __\/\\\___\/\\\.\/\\\ ____________   
      _\/\\\ ____________\/\\\ ____\//\\\ _\/\\\___\/\\\.\/\\\ ____________  
       _\/\\\ ____________\/\\\ _____\//\\\.\//\\\\\\\\\ _\/\\\ ____________ 
        _\/// _____________\/// _______\/// __\///////// __\/// _____________



██████╗ ██████╗  █   █  ███████╗
██╔══██╗██╔══██╗        ██╔════╝
██████╔╝██████╔╝██╗  ██╗█████╗  
██╔═══╝ ██╔══██╗██║  ██║██╔══╝  
██║     ██║  ██║╚█████╔╝██║     
╚═╝     ╚═╝  ╚═╝╚═════╝ ╚═╝     

// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.6.7;

/*-----------------------------------------------------------------
 *TO DO :
 *      *Move IPFS1 to tokenURI
 *      *"naked" token minting 
 *      *Importing naked tokens:  write app level contract for "actualizeRecord" in pruf_core
 *      *Design Json templates for IPFS1 and IPFS2
 *
 *      *Change contract authorizaton mapping in storage to an asset-class based mapping, E.G. address=>(assetClass=>uint8) 
 *              to determine if a contract is athorized to operate on a given asset class (or root asset class?)
 *              currently storage has address => (type,name) and name = > address. Proposed would change to:
 *              address => (assetClass => type), address=>name  and name = > address for foreward and backward resolution as well as type
 *              determination by assetClass.
 *
 *      *Look into asset rementants of asset locking
 *
 *      *Do not allow status change to escrow status
 *
 *      *Above 65k segregation (probably by ACinfo custodial type) (just need to add a wild west contract?)
 *
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 *Rules for reminting tokens:
 *  must have the plaintext that generates the rgtHash on-chain
 *
 *
 *Rules for burning records: 
 *  record is locked in escrow and the escrow contract gets the token. The asset is put into an indefinite escrow, 
 *  where the escrow amount is unpaid and time is indefinite. the asset owner is the escrow "holder" and can revert
 *  the escrow if they desire, which reverts the assetToken to their address. escrow amount is determined 
 *  AT THE TIME OF RECYCLING by the new record costs of the AC that the record is being recycled into by
 *  the new owner.
 *
 *
 * Rules for recycling records:
 *  escrow amount is the same as registration in the asset class where it will be registered (as per the "recycle asset" call),
 *  when the fee is paid the escrow is broken, and the asset token is assigned to the sender. The funds (less assetClassRoot fees)
 *  are divided 50/50 between the old owner (setter of the escrow) and the ACtoken holder for the new asset class. If funds are sent 
 *  to a dead escrow or there is an overpayment, the balance can be withdrawn.
 *
 *
 * Escrows with escrow.data > 199 cannot be ended by permissive end escrow (escrowmanager) 
 *   and must be ended only within their respective escrow contract.
 *
 *
 *  Recycle rules
 *          Not possible in Custodial asset classes
 *          Caller must hold token, must be in status 59
 *          Token goes into "indefinite" escrow, RGT set to 0xFFF...
 *              Caller is escrow controller, but escrow contract is "owner", can break escrow (resets to status 51)
 *              Price set when escrow is to be broken by reregistering, from costs of the category 
 *                     that it is to be imported into (endEscrow called from T_PRUF_APP?)
 *              Importing breaks the escrow
 *                  payment divided between ACroot, ACholder, and recycling address (escrow owner)     
 *                  token sent to new owner (payment sender), status set to 51
 *
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * FUTURE FEATURES?
 *      "bottle deposit" on asset creation to encourage recycling
 *  New Recycle :
 *          Not possible in Custodial asset classes
 *          Caller must hold token, must be in status 59
 *          Caller recieves deposit amount (how the bloody hell do we manage this????)
 *          Token goes into "indefinite" escrow, RGT set to 0xFFF...
 *              Caller is escrow controller, but escrow contract is "owner", can break escrow 
 *                      (requires repayment of deposit amount, resets to status 51)
 *              Price set when escrow is to be broken by reregistering, from costs of the category 
 *                     that it is to be imported into (endEscrow called from T_PRUF_APP?)
 *              Importing breaks the escrow
 *                  payment divided between ACroot, ACholder, and recycling address (escrow owner)     
 *                  token sent to new owner (payment sender), status set to 51
 *
 *
 *
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * IMPORTANT NOTE : DO NOT REMOVE FROM CODE:
 *      Verification of rgtHash in curated, custodial asset classes are not secure beyond the honorable intentions
 * of authorized recorders. All blockchain info is readable, so a bad actor could trivially obtain a copy of the
 * correct rgtHash on chain. This "stumbling block" measure is in place primarily to keep honest people honest, and
 * to require an actual, malicious effort to bypass security rather than a little copy-paste. Actual decentralized
 * security is provided with tokenized assets, which do not rely on the coercive trust relationship that creates the
 * incentive for recorders not to engage in malicious practices.
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * Order of require statements:
 * 1: (modifiers)
 * 2: checking custodial status
 * 3: checking the asset existance 
 * 4: checking the idendity and credentials of the caller
 * 5: checking the suitability of provided data for the proposed operation
 * 6: checking the suitability of asset details for the proposed operation
 * 7: verifying that provided verification data matches required data
 * 8: verifying that message contains any required payment
 *
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * Contract Resolution Names -
 *  A_TKN
 *  AC_TKN
 *  APP
 *  NP
 *  ECR
 *  AC_MGR
 *  AC_MNT
 *  APP_NC
 *  NP_NC
 *  ECR_NC
 *  ECR_MGR
 *  RCLR
 *
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * CONTRACT Types:  contractAdresses (storage)
 * 0   --NONE
 * 1   --Custodial or escrowManager 
 * 2   --Non-Custodial
 * 3   --Escrow contracts
 * 3   --Recycler 
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * ASSET CLASS Types: AC_data.custodyType (AC_manager)
 * 0   --NONE
 * 1   --Custodial
 * 2   --Non-Custodial
 *
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * Record status field key
 *
 * 0 = no status, Non transferrable. Default asset creation status
 *       default after FMR, and after status 5 (essentially a FMR) (IN frontend)
 * 1 = transferrable
 * 2 = nontransferrable
 * 3 = stolen
 * 4 = lost
 * 5 = transferred but not reImported (no new rghtsholder information) implies that asset posessor is the owner.
 *       must be re-imported by ACadmin through regular onboarding process
 *       no actions besides modify RGT to a new rightsholder can be performed on a statuss 5 asset (no status changes) (Frontend)
 * 6 = in supervised escrow, locked until timelock expires, but can be set to lost or stolen
 *       Status 1-6 Actions cannot be performed by automation.
 *       only ACAdmins can set or unset these statuses, except 5 which can be set by automation
 * 7 = out of Supervised escrow (user < 5)
 *
 * 50 Locked escrow
 * 51 = transferrable, automation set/unset (secret confirmed)(ACAdmin can unset)
 * 52 = non-transferrable, automation set/unset (secret confirmed)(ACAdmin can unset)
 * 53 = stolen (automation set)(ONLY ACAdmin can unset)
 * 54 = lost (automation set/unset)(ACAdmin can unset)
 * 55 = asset transferred automation set/unset (secret confirmed)(Only ACAdmin can unset) ####DO NOT USE????
 * 56 = escrow - automation set/unset (secret confirmed)(ACAdmin can unset)
 * 57 = out of escrow
 * 58 = out of locked escrow
 * 59 = Discardable
 * 60 = Recyclable (can only be reimported by an ACAdmin)
 *
*-----------------------------------------------------------------

*-----------------------------------------------------------------
 * Authorized User Types   registeredUsers[]
 * 1 - 4 = Standard User types
 * 1 - all priveleges
 * 2 - all but force-modify
 * 5 - 9 = Robot (cannot create of force-modify)
 * Other = unauth
 *
*-----------------------------------------------------------------
*-----------------------------------------------------------------
 * ----------SETUP PROCEDURES---------- *
 * need at least 3 Eth adressses
 * 1: Deploy Contracts
 * 2: Add contracts @ respective names in storage
 * 3: Set storage contract in each contract
 * 4: Resolve contract addresses
 * 5: Mint 2 root asset tokens. (Custodial, Non-Custodial)
 * 6: Mint 2 cust and 2 non-custodial asset classes in the home asset class
 * 7: Mint 1 cust and 1 non-custodial asset classes in the foreign asset class 
 * 8: Set costs / users / types for root && rooted AC token
 * 7: THE WORKS
 *
*-----------------------------------------------------------------
*/
